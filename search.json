[{"path":[]},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sachamber@fredhutch.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://getwilds.org/rls/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://getwilds.org/rls/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rls authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://getwilds.org/rls/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer.","code":""},{"path":"http://getwilds.org/rls/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). rls: Row Level Security. R package version 0.0.1.91, http://getwilds.org/rls, https://github.com/getwilds/rls.","code":"@Manual{,   title = {rls: Row Level Security},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 0.0.1.91, http://getwilds.org/rls},   url = {https://github.com/getwilds/rls}, }"},{"path":"http://getwilds.org/rls/index.html","id":"rls","dir":"","previous_headings":"","what":"Row Level Security","title":"Row Level Security","text":"Row Level Security stuff","code":""},{"path":"http://getwilds.org/rls/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Row Level Security","text":"Development version","code":"# install.packages(\"pak\") pak::pak(\"getwilds/rls\")"},{"path":"http://getwilds.org/rls/index.html","id":"golden-path-not-working-yet-readme-driven-development","dir":"","previous_headings":"","what":"Golden path (NOT WORKING YET, README Driven development)","title":"Row Level Security","text":"Connect Create policy add table xxx","code":"library(rls) library(DBI) library(RPostgres) con <- dbConnect(Postgres())"},{"path":"http://getwilds.org/rls/index.html","id":"bugs-features","dir":"","previous_headings":"","what":"Bugs? Features?","title":"Row Level Security","text":"Open issue issue tracker.","code":""},{"path":"http://getwilds.org/rls/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Row Level Security","text":"package follows Git Flow.","code":""},{"path":"http://getwilds.org/rls/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Row Level Security","text":"Please note rls project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://getwilds.org/rls/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Row Level Security","text":"MIT","code":""},{"path":"http://getwilds.org/rls/reference/has_postgres.html","id":null,"dir":"Reference","previous_headings":"","what":"has postgres? — has_postgres","title":"has postgres? — has_postgres","text":"postgres?","code":""},{"path":"http://getwilds.org/rls/reference/has_postgres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"has postgres? — has_postgres","text":"","code":"has_postgres(...)"},{"path":"http://getwilds.org/rls/reference/has_postgres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"has postgres? — has_postgres","text":"... args passed DBI::dbConnect()","code":""},{"path":"http://getwilds.org/rls/reference/has_postgres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"has postgres? — has_postgres","text":"boolean, TRUE Postgres app can can connected , FALSE ","code":""},{"path":"http://getwilds.org/rls/reference/rls-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rls: Row Level Security — rls-package","title":"rls: Row Level Security — rls-package","text":"Row level security helpers. Currenlty supports PostgreSQL Redshift flavored PostgreSQL.","code":""},{"path":[]},{"path":"http://getwilds.org/rls/reference/rls-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rls: Row Level Security — rls-package","text":"Maintainer: Scott Chamberlain sachamber@fredhutch.org (ORCID)","code":""},{"path":"http://getwilds.org/rls/reference/rls_check_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Check row level security status of a table — rls_check_status","title":"Check row level security status of a table — rls_check_status","text":"Check row level security status table","code":""},{"path":"http://getwilds.org/rls/reference/rls_check_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check row level security status of a table — rls_check_status","text":"","code":"rls_check_status(con, table)"},{"path":"http://getwilds.org/rls/reference/rls_check_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check row level security status of a table — rls_check_status","text":"con DBI database connection object. required. supports postgres redshift connections table (character) table name. required","code":""},{"path":"http://getwilds.org/rls/reference/rls_check_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check row level security status of a table — rls_check_status","text":"tibble","code":""},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a row level security policy — rls_construct_policy","title":"Construct a row level security policy — rls_construct_policy","text":"Construct row level security policy","code":""},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a row level security policy — rls_construct_policy","text":"","code":"rls_construct_policy(   name,   on,   as = NULL,   for_ = NULL,   to = NULL,   using = NULL,   with = NULL )"},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a row level security policy — rls_construct_policy","text":"name (character) policy name. required (character) table apply policy . required (character) permissive (default) restrictive. permissive combines \"\" restrictive combines \"\" for_ (character) permissive (default) restrictive. (character) role(s) policy applied. default PUBLIC, apply policy roles. using (character) Specifies filter applied clause query (character) check condition","code":""},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a row level security policy — rls_construct_policy","text":"s3 object class rls_policy_redshift","code":""},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct a row level security policy — rls_construct_policy","text":"https://www.postgresql.org/docs/current/sql-createpolicy.html","code":""},{"path":"http://getwilds.org/rls/reference/rls_construct_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a row level security policy — rls_construct_policy","text":"","code":"x <- rls_construct_policy(   name = \"hide_confidential\",   on = \"sometable\",   with = \"confidential BOOLEAN\",   using = \"confidential = false\" ) x #> <rls_policy> #>   policy name: hide_confidential #>   on: sometable #>   using: confidential = false #>   with: confidential BOOLEAN"},{"path":"http://getwilds.org/rls/reference/rls_create_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a row level security policy — rls_create_policy","title":"Create a row level security policy — rls_create_policy","text":"Create row level security policy","code":""},{"path":"http://getwilds.org/rls/reference/rls_create_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a row level security policy — rls_create_policy","text":"","code":"rls_create_policy(con, policy)"},{"path":"http://getwilds.org/rls/reference/rls_create_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a row level security policy — rls_create_policy","text":"con DBI database connection object policy (list) policy derived rls_construct_policy()","code":""},{"path":"http://getwilds.org/rls/reference/rls_create_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a row level security policy — rls_create_policy","text":"","code":"if (FALSE) { # interactive() && has_postgres() library(DBI) library(RPostgres) con <- dbConnect(Postgres())  dbCreateTable(con, \"sometable\", mtcars)  policy1 <- rls_construct_policy(   name = \"hide_confidential\",   on = \"sometable\",   using = \"(true)\" ) policy1 rls_create_policy(con, policy1) rls_policies(con)  policy2 <- rls_construct_policy(   name = \"policy_concerts\",   on = \"sometable\",   for_ = \"SELECT\",   using = \"(true)\" ) policy2 rls_create_policy(con, policy2) rls_policies(con)  # cleanup rls_drop_policy(con, policy1) rls_drop_policy(con, policy2) dbDisconnect(con) }"},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a row level security policy — rls_drop_policy","title":"Drop a row level security policy — rls_drop_policy","text":"Drop row level security policy","code":""},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a row level security policy — rls_drop_policy","text":"","code":"rls_drop_policy(con, policy = NULL, name = NULL, table = NULL)"},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a row level security policy — rls_drop_policy","text":"con DBI database connection object policy (list) policy derived rls_construct_policy() name (character) policy name. optional table (character) table name. optional","code":""},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop a row level security policy — rls_drop_policy","text":"policy supplied, name table required. policy supplied, name table need supplied.","code":""},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Drop a row level security policy — rls_drop_policy","text":"https://www.postgresql.org/docs/current/sql-droppolicy.html","code":""},{"path":"http://getwilds.org/rls/reference/rls_drop_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop a row level security policy — rls_drop_policy","text":"","code":"if (FALSE) { # interactive() && has_postgres() library(DBI) library(RPostgres) con <- dbConnect(Postgres())  dbCreateTable(con, \"atable\", mtcars)  policy1 <- rls_construct_policy(   name = \"hide_confidential\",   on = \"atable\",   using = \"(true)\" ) policy1 rls_create_policy(con, policy1) rls_policies(con) rls_drop_policy(con, policy1) rls_policies(con)  dbDisconnect(con) }"},{"path":"http://getwilds.org/rls/reference/rls_enable.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable row level security on a table — rls_enable","title":"Enable row level security on a table — rls_enable","text":"Enable row level security table","code":""},{"path":"http://getwilds.org/rls/reference/rls_enable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable row level security on a table — rls_enable","text":"","code":"rls_enable(con, table)  rls_disable(con, table)"},{"path":"http://getwilds.org/rls/reference/rls_enable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable row level security on a table — rls_enable","text":"con DBI database connection object. required. supports postgres redshift connections table (character) table name. required","code":""},{"path":"http://getwilds.org/rls/reference/rls_enable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable row level security on a table — rls_enable","text":"","code":"if (FALSE) { # has_postgres() library(DBI) library(RPostgres) con <- dbConnect(Postgres()) dbListTables(con) rls_enable(con, table = \"accounts\") rls_check_status(con, \"accounts\") rls_disable(con, table = \"accounts\") rls_check_status(con, \"accounts\") dbDisconnect(con) }"},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":null,"dir":"Reference","previous_headings":"","what":"List row level security policies — rls_policies","title":"List row level security policies — rls_policies","text":"List row level security policies","code":""},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List row level security policies — rls_policies","text":"","code":"rls_policies(con)"},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List row level security policies — rls_policies","text":"con DBI database connection object. required. supports postgres redshift connections","code":""},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List row level security policies — rls_policies","text":"tibble RLS policies","code":""},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List row level security policies — rls_policies","text":"difference postgres redshift use different table names RLS policies: Postgres: pg_policies Redshift: svv_rls_policy","code":""},{"path":"http://getwilds.org/rls/reference/rls_policies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List row level security policies — rls_policies","text":"","code":"if (FALSE) { # has_postgres() library(DBI) library(RPostgres) con <- dbConnect(Postgres()) rls_policies(con) dbDisconnect(con) }"},{"path":"http://getwilds.org/rls/news/index.html","id":"rls-00191","dir":"Changelog","previous_headings":"","what":"rls 0.0.1.91","title":"rls 0.0.1.91","text":"ready yet","code":""}]
