---
title: "Getting Started"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Getting Started}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

Row Level Security for PostgreSQL and AWS Redshift.

The following is a walk-through of using row level security in PostgreSQL, including checks to make sure policies behave as expected.

```{r setup}
library(tibble)
library(DBI)
library(RPostgres)
library(rls)
```

## Start PostgreSQL locally

Start Postgres however you do that.

## Create a connection

```{r}
con <- dbConnect(Postgres())
```

```{r echo=FALSE}
user <- dbGetQuery(con, "select current_user")$current_user
```

## Create a table

```{r}
invisible(dbExecute(con, "
  CREATE TABLE passwd (
  user_name             text UNIQUE NOT NULL,
  pwhash                text,
  uid                   int  PRIMARY KEY,
  gid                   int  NOT NULL,
  real_name             text NOT NULL,
  home_phone            text,
  extra_info            text,
  home_dir              text NOT NULL,
  shell                 text NOT NULL
);
"))
```

```{r}
sample_data <- tribble(
  ~user_name, ~pwhash, ~uid, ~gid, ~real_name, ~home_phone, ~extra_info, ~home_dir, ~shell,
  'admin','xxx',0,0,'Admin','111-222-3333',NULL,'/root','/bin/dash',
  'bob','xxx',1,1,'Bob','123-456-7890',NULL,'/home/bob','/bin/zsh',
  'alice','xxx',2,1,'Alice','098-765-4321',NULL,'/home/alice','/bin/zsh'
)
dbAppendTable(con, "passwd", sample_data)
```

## Create roles

```{r results="hide"}
# Administrator
dbExecute(con, "CREATE ROLE admin")
# Normal user
dbExecute(con, "CREATE ROLE bob")
# Another normal user
dbExecute(con, "CREATE ROLE alice")
```

## Enable row level security

Enable row level security with `rls_enable`

```{r}
rls_enable(con, "passwd")
```

Then check that it worked with `rls_check_status`

```{r}
rls_check_status(con, "passwd")
```

## Create row level security policies

`admin_all` = Administrator can see all rows and add any rows

```{r}
(policy1 <- rls_construct_policy(
  name = "admin_all",
  on = "passwd",
  to = "admin",
  using = "(true)",
  with = "(true)"
))
rls_create_policy(con, policy1)
rls_policies(con)
```

`all_view` = Normal users can view all rows

```{r}
(policy2 <- rls_construct_policy(
  name = "all_view",
  on = "passwd",
  for_ = "SELECT",
  using = "(true)"
))
rls_create_policy(con, policy2)
rls_policies(con)
```

`user_mod` = Normal users can update their own records, but limit which shells a normal user is allowed to set

```{r}
(policy3 <- rls_construct_policy(
  name = "user_mod",
  on = "passwd",
  for_ = "UPDATE",
  using = "(current_user = user_name)",
  with = "(
    current_user = user_name AND
    shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh')
  )"
))
rls_create_policy(con, policy3)
rls_policies(con)
```

## Grant permissions

Allow admin all normal rights

```{r results="hide"}
dbExecute(con, "GRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin")
```

Users only get select access on public columns

```{r results="hide"}
dbExecute(con, "GRANT SELECT
  (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell)
  ON passwd TO public"
)
```

Allow users to update certain columns

```{r results="hide"}
dbExecute(con, "GRANT UPDATE
  (pwhash, real_name, home_phone, extra_info, shell)
  ON passwd TO public"
)
```

## Ensure the system behaves as expected

```{r}
dbExecute(con, "SET SESSION AUTHORIZATION admin")
dbGetQuery(con, "SELECT * from passwd")
```

```{r error=TRUE}
dbExecute(con, "SET SESSION AUTHORIZATION alice")
dbGetQuery(con, "SELECT * from passwd")
```

```{r}
dbGetQuery(con, "SELECT user_name,real_name,home_phone,extra_info,home_dir,shell FROM passwd")
```

```{r error=TRUE}
dbExecute(con, "UPDATE passwd SET user_name = 'joe'")
```

```{r error=TRUE}
dbExecute(con, "UPDATE passwd SET real_name = 'Alice Doe'")
dbExecute(con, "UPDATE passwd SET real_name = 'John Doe' WHERE user_name = 'admin'")
dbExecute(con, "UPDATE passwd SET shell = '/bin/xx'")
dbExecute(con, "DELETE from passwd")
dbExecute(con, "INSERT INTO passwd (user_name) VALUES ('xxx')")
```

Alice can change her own password; RLS silently prevents updating other rows

```{r}
dbExecute(con, "UPDATE passwd SET pwhash = 'abc'")
```


```{r cleanup, echo=FALSE, results="hide"}
dbExecute(con, glue::glue("SET SESSION AUTHORIZATION {user}"))
dbExecute(con, "DROP POLICY admin_all ON passwd")
dbExecute(con, "DROP POLICY all_view ON passwd")
dbExecute(con, "DROP POLICY user_mod ON passwd")
dbExecute(con, "DROP TABLE passwd CASCADE")
dbExecute(con, "DROP ROLE admin")
dbExecute(con, "DROP ROLE bob")
dbExecute(con, "DROP ROLE alice")
```
